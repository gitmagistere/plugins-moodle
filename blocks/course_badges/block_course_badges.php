<?php
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

require_once($CFG->dirroot . '/blocks/course_badges/BadgesList.php');
require_once($CFG->dirroot . '/blocks/course_badges/overview/Filters.php');

class block_course_badges extends block_base {

    function init() {
        $this->title = get_string('pluginname', 'block_course_badges');
    }

    function get_content_for_output($output) {
        return parent::get_content_for_output($output); // TODO: Change the autogenerated stub
    }

    function has_config() {
        return true;
    }

    function applicable_formats() {
        return array('course-view' => true, 'mod' => true);
    }

    function instance_allow_multiple() {
        return false;
    }

    function get_content() {
        global $USER;

        if ($this->content !== NULL) {
            return $this->content;
        }

        $badgeList = new BadgesList($this->page->course->id);
        $badgesToDisplay = $badgeList->get_badges_list_for_user($USER->id);

        $this->content = new stdClass();
        $this->content->text = '';
        $this->content->footer = '';

        if ($badgesToDisplay[BadgesList::EARNED_BADGES]) {
            $this->content->text .= $this->print_section('earnedbadges', 'earnedbadges',
                $badgesToDisplay[BadgesList::EARNED_BADGES]);
        }

        if ($badgesToDisplay[BadgesList::SELECTED_BADGES]) {
            $this->content->text .= $this->print_section('selectedbadges', 'selectedbadges',
                $badgesToDisplay[BadgesList::SELECTED_BADGES]);
        }

        if ($badgesToDisplay[BadgesList::AVAILABLE_BADGES]) {
            $this->content->text .= $this->print_section('availablebadges', 'availablebadges',
                $badgesToDisplay[BadgesList::AVAILABLE_BADGES]);
        }

        if (!$badgesToDisplay[BadgesList::AVAILABLE_BADGES]
            && !$badgesToDisplay[BadgesList::SELECTED_BADGES]
            && !$badgesToDisplay[BadgesList::EARNED_BADGES]) {
            $this->content->text .= html_writer::tag('p', get_string('nobadgesavailable', 'block_course_badges'));
        }

        $courseid = $this->page->course->id;
        $canviewbadgesoverview = has_capability('block/course_badges:viewbadgesoverview', $this->context);

        $mods = Filters::get_list_mod_badges($courseid);
        $coursebadgeAvailable = false;
        foreach ($mods as $mod) {
            $cminfo = get_fast_modinfo($courseid)->cms[$mod->cmid];
            if ($cminfo->visible && $cminfo->available) {
                $coursebadgeAvailable = true;
            }
        }   
        if ($canviewbadgesoverview && $coursebadgeAvailable) {
           $url = new moodle_url('/blocks/course_badges/overview/badges.php', ['id' => $courseid]);
           $this->content->text .= html_writer::link($url, get_string('badgesoverviewlink', 'block_course_badges'));
           $this->content->text .= html_writer::empty_tag('br');
        }

        $canviewparticipantsoverview = has_capability('block/course_badges:viewparticipantsoverview', $this->context);

        if ($canviewparticipantsoverview) {
           $url = new moodle_url('/blocks/course_badges/overview/participants.php', ['id' => $courseid]);
           $this->content->text .= html_writer::link($url, get_string('participantsoverviewlink', 'block_course_badges'));
           $this->content->text .= html_writer::empty_tag('br');
        }

        if ($canviewbadgesoverview || $canviewparticipantsoverview) {
            $url = new moodle_url('/badges/index.php', ['type' => BADGE_TYPE_COURSE, 'id' => $courseid]);
            $this->content->text .= html_writer::link($url, get_string('managebadgeslink', 'block_course_badges'));
            $this->content->text .= html_writer::empty_tag('br');
        }

        if (Filters::get_list_badges($courseid) && isInteractiveActionAvailable()) {
            $url = new moodle_url('/blocks/course_badges/map/index.php', ['id' => $courseid]);
            $this->content->text .= html_writer::link($url, get_string('badgesmaplink', 'block_course_badges'));
        }

        global $PAGE;
        $PAGE->requires->js_call_amd('block_course_badges/course_badges', 'init_show_more');
        $PAGE->requires->js_call_amd('block_course_badges/course_badges', 'init_block_header');
    
        return $this->content;
}

    function print_section($title, $titlecls, $data) {
        $courseid = $this->page->course->id;
        $context = context_course::instance($courseid);
        $html = '';

        if (count($data) <= 1) {
            $title .= 'singular';
        }

        $html .= html_writer::tag('h3', get_string($title, 'block_course_badges'),
            ['class' => $titlecls]);
        $html .= html_writer::div('', ['class' => 'nb-badge-show', 'value' => '4']);
        $html .= html_writer::start_div('badgescontent');

        foreach ($data as $d) {
            $badgediv = html_writer::start_div('bcb_badge');
            $badgediv .= html_writer::img($d->imgurl, $d->name, ['title' => $d->name]);
            $badgediv .= html_writer::tag('span', $d->name);
            $badgediv .= html_writer::end_div();
            
            if (has_capability('moodle/badges:viewbadges', $context)) {
                $url = new moodle_url('/badges/overview.php', ['id' => $d->badgeid]);
                $html .= html_writer::link($url, $badgediv);
            } else {
                $html .= $badgediv;
            }
        }

        $html .= html_writer::tag('span', get_string('showmore', 'block_course_badges'),
            ['class' => 'showmore']);
        $html .= html_writer::tag('span', '', ['class' => 'clear']);
        $html .= html_writer::end_div();

        return $html;
    }
}
